Smallest Missing Integer Greater Than Sequential Prefix Sum
------------------------------------------------------------------
class Solution {
public:
    int missingInteger(vector<int>& arr) {
        int s=arr[0],max=0,c=1,mi=0,s1=0;
        map<int,int>m;
        if(arr.size()==1) return arr[0]+1;
        for(int i=1;i<arr.size();i++){
            if(arr[i]==arr[i-1]+1){
                c++;
                s+=arr[i];
            }
            else{
                if(max<c){
                    s1++;
                    max=s;
                    mi=c;
                }
                s=0;
                c=0;
            }
        }
        if(s1>1) return arr[0]+1;
        for(int i=0;i<arr.size();i++){
            m[arr[i]]++;//1 2 3 2 5
        }
        while(max){
            if(m[max]==0) return max;
            max++;
        }
        return s;
    }
};



Minimum Number of Operations to Make Array XOR Equal to K
-----------------------------------------------------------------
class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        vector<int> v(32,0);
        for(int i = 0 ; i < nums.size();i++){
            for(int j=0;j<32;j++){
                if(nums[i] & (1<<j)) v[j]++;
            }
        }
        
        int c = 0;
        for(int i = 0 ; i < 32; i++){
            if(k & (1<<i)) {
                if(v[i]%2==0) c++;
            } else {
                if(v[i]&1) c++;
            }
        }
        
        return c;
    }
};



Minimum Number of Operations to Make X and Y Equal
-----------------------------------------------------
class Solution {
public:
    int minimumOperationsToMakeEqual(int x, int y) {
        
        queue<pair<int,int>> q;
        q.push({x,0});
        set<int> s;
        
        while(!q.empty()) {
            
            int node  = q.front().first;
            int steps = q.front().second;
            q.pop();
            
            if(node == y) return steps;
            if(s.count(node)) continue;
            
            s.insert(node);
            if(node % 11 == 0){
                q.push({node/11,steps+1});
            }
            if(node % 5 == 0){
                q.push({node/5,steps+1});
            }
            q.push({node + 1,steps+1});
            q.push({node - 1,steps+1});
            
        }
        
        return -1;
    }
};
