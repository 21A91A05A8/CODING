class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        // bool flag=true;
        // sort(nums.begin(),nums.end());
        // int n=nums.size();
        // long long s=0;
        // if(n<3) return -1;
        // vector<long long>a(n,0);
        // for(int i=0;i<n;i++){
        //     s+=nums[i];
        //     a[i]=s;
        // }
        // for(int i=n-1;i>0;i--){
        //     if(nums[i]<a[i-1]){
        //         flag=false;
        //         return a[i];
        //     }
        //     else{
        //         continue;
        //     }
        // }
        // return -1;
        priority_queue<int>q(nums.begin(),nums.end());
        auto s=accumulate(nums.begin(),nums.end(),0LL);
        while(q.size()>2){
            auto n=q.top();
            if(s-n>n)   return s;
            q.pop();
            s-=n;
        }
        return -1;
    }
};
